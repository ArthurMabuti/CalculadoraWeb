@page "/"

<PageTitle>Home</PageTitle>

<MudMainContent Class="flex-auto">
    <MudStack AlignItems="AlignItems.Center">
        <MudPaper Height="400px" Width="295px" Elevation="4" Style="@($"background:{Colors.Pink.Accent1}")">
            <MudTextField @bind-Value="Visor" Class="align-text-right" Variant="Variant.Filled" Disabled="true" Placeholder="0" />
            <MudGrid Class="pa-3" Spacing="1">
                @foreach (char item in Combination)
                {
                            <MudItem>
                        <MudButton Class="py-4 px-4" Variant="@(SpecialCharacters.Contains(item) ? Variant.Filled : Variant.Outlined)"
                                   Style="@($"color:{(ChangeColor ? Theme.PaletteLight.White : Theme.PaletteDark.Dark)}; background:{GetBackgroundColor(item)}")"
                                   OnClick="@(item == 'C' ? EventCallback.Factory.Create<MouseEventArgs>(this, ZerarVisor)
                                            : item == '=' ? EventCallback.Factory.Create<MouseEventArgs>(this, RetornarResultado)
                                            : EventCallback.Factory.Create<MouseEventArgs>(this, () => AdicionarAoVisor(item)))">
                            @item
                        </MudButton>
                            </MudItem>
                        }
            </MudGrid>
        </MudPaper>
    </MudStack>
</MudMainContent>

@code {
    private static MudTheme Theme = new();
    public static bool ChangeColor { get; set; }
    public string? Visor { get; set; }
    private int Count = 0;
    private char[] Combination = ['+', '7', '8', '9', '-', '4', '5', '6', '*', '1', '2', '3', '/', '.', '0', '=', 'C'];
    private char[] SpecialCharacters = ['+', '-', '*', '/', 'C'];

    private MudBlazor.Utilities.MudColor ButtonBackgroundColor = ChangeColor ? Colors.Pink.Lighten1 : Theme.PaletteDark.Dark;

    private Calculator Calculator = new();

    private void AdicionarAoVisor(char item)
    {
        Visor += item;
    }

    private void ZerarVisor()
    {
        Visor = string.Empty;
    }

    private void RetornarResultado()
    {
        Visor = Calculator.Evaluate(Visor!).ToString();
    }

    private string GetBackgroundColor(char item)
    {
        if (SpecialCharacters.Contains(item))
        {
            return ChangeColor ? Colors.Pink.Lighten1.ToString() : Theme.PaletteLight.Warning.ToString();
        }
        return "inherit"; // Sempre deve retornar uma cor válida
    }
}