@page "/"

<PageTitle>Home</PageTitle>

<MudMainContent Class="flex-auto">
    <MudStack AlignItems="AlignItems.Center">
        <MudPaper Height="400px" Width="295px" Elevation="4" Style="@($"background:{Colors.Pink.Accent1}")">
            <MudTextField @bind-Value="Visor" Class="align-text-right" Variant="Variant.Filled" Disabled="true" Placeholder="0" />
            <MudGrid Class="pa-3" Spacing="1">
                @foreach (char item in Combination)
                {
                    @if (SpecialCharacters.Contains(item))
                    {
                        if (item == 'C')
                        {
                            <MudItem>
                                <MudButton @onclick="ZerarVisor" Class="py-4 px-4" Variant="Variant.Filled" Style="@($"color:{Theme.PaletteLight.White}; background:{Colors.Pink.Lighten1}")">@item</MudButton>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem>
                                <MudButton OnClick="@((e) => AdicionarAoVisor(item))" Class="py-4 px-4" Variant="Variant.Filled" Style="@($"color:{Theme.PaletteLight.White}; background:{Colors.Pink.Lighten1}")">@item</MudButton>
                            </MudItem>
                        }
                    }
                    else
                    {
                        <MudItem>
                            <MudButton OnClick="@((e) => AdicionarAoVisor(item))" Class="py-4 px-4" Variant="Variant.Outlined" Style="@($"color:{Theme.PaletteDark.White}")">@item</MudButton>
                        </MudItem>
                    }
                    Count++;
                }
            </MudGrid>
        </MudPaper>
    </MudStack>
</MudMainContent>


@* <MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <body>
            <div id="calculator">
                <input id="display" readonly>
                <div id="keys">
                    <button onclick="appendToDisplay('+')" class="operator-btn">+</button>
                    <button onclick="appendToDisplay('7')">7</button>
                    <button onclick="appendToDisplay('8')">8</button>
                    <button onclick="appendToDisplay('9')">9</button>
                    <button onclick="appendToDisplay('-')" class="operator-btn">-</button>
                    <button onclick="appendToDisplay('4')">4</button>
                    <button onclick="appendToDisplay('5')">5</button>
                    <button onclick="appendToDisplay('6')">6</button>
                    <button onclick="appendToDisplay('*')" class="operator-btn">*</button>
                    <button onclick="appendToDisplay('1')">1</button>
                    <button onclick="appendToDisplay('2')">2</button>
                    <button onclick="appendToDisplay('3')">3</button>
                    <button onclick="appendToDisplay('/')" class="operator-btn">/</button>
                    <button onclick="appendToDisplay('0')">0</button>
                    <button onclick="appendToDisplay('.')">.</button>
                    <button onclick="calculate()">=</button>
                    <button onclick="clearDisplay()" class="operator-btn">C</button>
                </div>
            </div>
        </body>
    </MudContainer>
</MudMainContent> *@

@code {
    private static MudTheme Theme = new();
    public static bool ChangeColor { get; set; }
    public string? Visor { get; set; }
    private int Count = 0;
    private char[] Combination = ['+', '7', '8', '9', '-', '4', '5', '6', '*', '1', '2', '3', '/', '.', '0', '=', 'C'];
    private char[] SpecialCharacters = ['+', '-', '*', '/', 'C'];

    private MudBlazor.Utilities.MudColor ButtonBackgroundColor = ChangeColor ? Colors.Pink.Lighten1 : Theme.PaletteDark.Dark;

    private Calculator Calculator = new();

    private void AdicionarAoVisor(char item)
    {
        Visor += item;
    }

    private void ZerarVisor()
    {
        Visor = string.Empty;
    }
    private string GetBackgroundColor(char item)
    {
        if (SpecialCharacters.Contains(item))
        {
            return ChangeColor ? Colors.Pink.Lighten1.ToString() : Theme.PaletteLight.Warning.ToString();
        }
        return "inherit"; // Sempre deve retornar uma cor válida
    }
}