@page "/"

<PageTitle>Home</PageTitle>

<MudMainContent Class="flex-auto">
    <MudStack AlignItems="AlignItems.Center">
        <MudPaper Height="400px" Width="295px" Elevation="4" Style="@($"background: {(ChangeColor ? Colors.Pink.Accent1 : "inherit")}")">
            <MudTextField @bind-Value="Visor" Variant="Variant.Filled" Disabled="true" Placeholder="0" />
            <MudGrid Class="pa-3" Spacing="1">
                @foreach (char item in Combination)
                {
                    <MudItem>
                        <MudButton Class="py-4 px-4" Variant="@(SpecialCharacters.Contains(item) ? Variant.Filled : Variant.Outlined)"
                                   Style="@($"color:{(ChangeColor ? Theme.PaletteLight.White : Theme.PaletteDark.Dark)}; background:{GetBackgroundColor(item)}")"
                                   OnClick="@(item == 'C' ? EventCallback.Factory.Create<MouseEventArgs>(this, ZerarVisor)
                                            : item == '=' ? EventCallback.Factory.Create<MouseEventArgs>(this, RetornarResultado)
                                            : EventCallback.Factory.Create<MouseEventArgs>(this, () => AdicionarAoVisor(item)))">
                            @item
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
        <MudToggleIconButton @bind-Toggled="ChangeColor" Icon="@Icons.Material.Filled.Contrast" Color="@Color.Dark" ToggledColor="@Color.Primary" />
        <span>@(ChangeColor ? "Rosa" : "Branco")</span>
    </MudStack>
</MudMainContent>

@code {
    private static MudTheme Theme = new();
    public static bool ChangeColor { get; set; }
    public string? Visor { get; set; }
    private int Count = 0;
    private char[] Combination = ['+', '7', '8', '9', '-', '4', '5', '6', '*', '1', '2', '3', '/', ',', '0', '=', 'C'];
    private char[] SpecialCharacters = ['+', '-', '*', '/', 'C'];

    private MudBlazor.Utilities.MudColor ButtonBackgroundColor = ChangeColor ? Colors.Pink.Lighten1 : Theme.PaletteDark.Dark;

    private Calculator Calculator = new();

    private void AdicionarAoVisor(char item)
    {
        if (char.IsDigit(item) || item == ',')
        {
        Visor += item;
    }
        else if (SpecialCharacters.Contains(item))
        {
            if (Visor is null && item == '-') Visor += item;
            if(Visor is not null)
            {
                if (char.IsDigit(Visor[^1])) Visor += item;
                else if (!Visor!.EndsWith(item)) Visor = Visor.Substring(0, Visor.Length - 1) + item;
            }
        }
    }

    private void ZerarVisor()
    {
        Visor = null;
    }

    private void RetornarResultado()
    {
        string valorDoVisor = Visor;
        try
        {
            Visor = Calculator.Calculate(Visor).ToString();
        }
        catch (Exception ex)  
        {
            Visor = "Erro na expressão";  // Exibe erro para o usuário
            Console.WriteLine($"Erro ao calcular: {ex.Message}");  // Loga o erro no console ou arquivo de log
        }
        finally
        {
            // Se o valor do visor não foi alterado (ou foi um erro), mantém o visor com a mensagem de erro
            if (valorDoVisor == Visor && Visor != "Erro na expressão")
            {
                Visor = null;  // Caso contrário, limpa o visor
            }
        }
    }


    private string GetBackgroundColor(char item)
    {
        if (SpecialCharacters.Contains(item))
        {
            return ChangeColor ? Colors.Pink.Lighten1.ToString() : Theme.PaletteLight.Warning.ToString();
        }
        return "inherit"; // Sempre deve retornar uma cor válida
    }
}